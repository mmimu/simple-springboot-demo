<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>

    <properties resource="generator.properties"/>
    <!-- mysql jdbc driver location -->
    <!-- 指定数据库连接驱动jara地址 -->
    <!-- 这里不使用 指定 绝对路径的方式 加载 mysql 驱动 而是 在
      mybatis-generator-maven-plugin 插件中 添加 dependency 的方式
      可参考 pom.xml 文件
      -->
    <!--<classPathEntry
            location="/Users/mimu/maven-repository/mysql/mysql-connector-java/5.1.42/mysql-connector-java-5.1.42.jar"/>
-->
    <!-- one database one context  -->
    <!-- 一个数据库一个context -->
    <context id="mybatisCustomUserDatabase" targetRuntime="MyBatis3">
        <!-- this plugin generate the java pojo which implements serializable interface and
          generate the uuid code-->
        <!-- 生成的pojo，将implements Serializable -->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>
        <!-- comment generator  -->
        <commentGenerator>
            <!-- suppress all comments 取消所有注释 -->
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>

        <!-- jdbc connection information  -->
        <!-- 数据库链接URL、用户名、密码 -->
        <jdbcConnection driverClass="${db.driver}" connectionURL="${user.db.user.url}"
                        userId="${user.db.user.username}"
                        password="${user.db.user.password}"/>

        <!-- java type convert     java 类型转换 -->
        <javaTypeResolver>
            <!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer true，把JDBC DECIMAL
                和 NUMERIC 类型解析为java.math.BigDecimal -->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!-- 生成model模型，对应的包路径，以及文件存放路径(targetProject)，targetProject可以指定具体的路径,如./src/main/java，
            也可以使用“MAVEN”来自动生成，这样生成的代码会在target/generatord-source目录下 -->
        <javaModelGenerator targetPackage="${user.generator.targetPackage.model}"
                            targetProject="${user.generator.targetPackage}">
            <!-- 是否在当前路径下新加一层schema, false 路径com.mimu.simple.springboot.mybatis.generator.model，
            true:com.mimu.simple.springboot.mybatis.generator.model.[schemaName]
            此处的 schemaName 为 下面 <table> 元素指定的 achemaName  -->
            <property name="enableSubPackages" value="false"/>
            <!-- 从数据库返回的值被清理前后的空格 -->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>


        <!--对应的mapper.xml文件 -->
        <sqlMapGenerator targetPackage="${user.generator.targetResources.mapper}"
                         targetProject="${user.generator.targetResources}">
            <!-- 是否在当前路径下新加一层schema, false 路径com.mimu.simple.springboot.mybatis.generator.mapper，
            true:com.mimu.simple.springboot.mybatis.generator.mapper.[schemaName]
            此处的 schemaName 为 下面 <table> 元素指定的 achemaName  -->
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>

        <!--
        Mapper接口的实现方式有 3 种：
        ANNOTATEDMAPPER（纯注解方式）
        XMLMAPPER（纯XML方式）和
        MIXEDMAPPER （混合方式），
        通常我们会设置为MIXEDMAPPER (混合方式)，对于Mapper接口中简单的方式，
        会只用注解形式，对于复杂方法，会使用 XML 的形似
         -->
        <!-- 对应的Mapper接口类文件 -->
        <javaClientGenerator type="MIXEDMAPPER"
                             targetPackage="${user.generator.targetPackage.mapper}"
                             targetProject="${user.generator.targetPackage}">
            <!-- 是否在当前路径下新加一层schema, false 路径com.mimu.simple.springboot.mybatis.generator.mapper，
            true:com.mimu.simple.springboot.mybatis.generator.mapper.[schemaName]
            此处的 schemaName 为 下面 <table> 元素指定的 achemaName  -->
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>

        <!-- 列出要生成 代码的数据表  -->
        <!-- schema即为数据库名 tableName为对应的数据库表 domainObjectName是要生成的实体类 enable*ByExample
                   是否生成 example类   -->
        <!--<table tableName="term_info" domainObjectName="termInfo"
               enableCountByExample="false" enableDeleteByExample="false"
               enableSelectByExample="false"
               enableUpdateByExample="false">
            &lt;!&ndash;插入数据时，返回插入行数 还是 自增主键；常见值为 DB2,Mysql,SqlServer等 如果 identity 为 true
             则 mbg(mybatis generator) 在 生成 <insert> 插入语句时 会 添加 <selectKey> 元素 以指定返回的
             自增主键的值&ndash;&gt;
            <generatedKey column="id" sqlStatement="Mysql" identity="true"/>
            &lt;!&ndash;指定 某列的 数据类型  &ndash;&gt;
            <columnOverride column="id" jdbcType="" javaType="" typeHandler=""/>
        </table>-->
        <table schema="${user.db.user.username}" tableName="term_info" domainObjectName="TermInfo"
               enableCountByExample="false" enableDeleteByExample="false"
               enableSelectByExample="false"
               enableUpdateByExample="false">
            <!-- 用于指定生成实体类时是否使用实际的列名作为实体类的属性名。false是 Camel Case风格-->
            <property name="useActualColumnNames" value="false"/>
            <generatedKey column="id" sqlStatement="Mysql" identity="true"/>
        </table>
        <table schema="${user.db.user.username}" tableName="user_info" domainObjectName="UserInfo"
               enableCountByExample="false" enableDeleteByExample="false"
               enableSelectByExample="false"
               enableUpdateByExample="false">
            <!-- 用于指定生成实体类时是否使用实际的列名作为实体类的属性名。false是 Camel Case风格-->
            <property name="useActualColumnNames" value="false"/>
            <generatedKey column="id" sqlStatement="Mysql" identity="true"/>
        </table>
    </context>

    <!--<context id="mybatisCustomTermDatabase" targetRuntime="MyBatis3">
        &lt;!&ndash; this plugin generate the java pojo which implements serializable interface and
          generate the uuid code&ndash;&gt;
        &lt;!&ndash; 生成的pojo，将implements Serializable &ndash;&gt;
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>
        &lt;!&ndash; comment generator  &ndash;&gt;
        <commentGenerator>
            &lt;!&ndash; suppress all comments 取消所有注释 &ndash;&gt;
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>

        &lt;!&ndash; jdbc connection information  &ndash;&gt;
        &lt;!&ndash; 数据库链接URL、用户名、密码 &ndash;&gt;
        <jdbcConnection driverClass="${db.driver}" connectionURL="${term.db.user.url}"
                        userId="${term.db.user.username}"
                        password="${term.db.user.password}"/>

        &lt;!&ndash; java type convert     java 类型转换 &ndash;&gt;
        <javaTypeResolver>
            &lt;!&ndash; 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer true，把JDBC DECIMAL
                和 NUMERIC 类型解析为java.math.BigDecimal &ndash;&gt;
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        &lt;!&ndash; 生成model模型，对应的包路径，以及文件存放路径(targetProject)，targetProject可以指定具体的路径,如./src/main/java，
            也可以使用“MAVEN”来自动生成，这样生成的代码会在target/generatord-source目录下 &ndash;&gt;
        <javaModelGenerator targetPackage="${term.generator.targetPackage.model}"
                            targetProject="${term.generator.targetPackage}">
            &lt;!&ndash; 是否在当前路径下新加一层schema, false 路径com.mimu.simple.springboot.mybatis.generator.model，
            true:com.mimu.simple.springboot.mybatis.generator.model.[schemaName]
            此处的 schemaName 为 下面 <table> 元素指定的 achemaName  &ndash;&gt;
            <property name="enableSubPackages" value="false"/>
            &lt;!&ndash; 从数据库返回的值被清理前后的空格 &ndash;&gt;
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>


        &lt;!&ndash;对应的mapper.xml文件 &ndash;&gt;
        <sqlMapGenerator targetPackage="${term.generator.targetResources.mapper}"
                         targetProject="${term.generator.targetResources}">
            &lt;!&ndash; 是否在当前路径下新加一层schema, false 路径com.mimu.simple.springboot.mybatis.generator.mapper，
            true:com.mimu.simple.springboot.mybatis.generator.mapper.[schemaName]
            此处的 schemaName 为 下面 <table> 元素指定的 achemaName  &ndash;&gt;
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>

        &lt;!&ndash;
        Mapper接口的实现方式有 3 种：
        ANNOTATEDMAPPER（纯注解方式）
        XMLMAPPER（纯XML方式）和
        MIXEDMAPPER （混合方式），
        通常我们会设置为MIXEDMAPPER (混合方式)，对于Mapper接口中简单的方式，
        会只用注解形式，对于复杂方法，会使用 XML 的形似
         &ndash;&gt;
        &lt;!&ndash; 对应的Mapper接口类文件 &ndash;&gt;
        <javaClientGenerator type="MIXEDMAPPER"
                             targetPackage="${term.generator.targetPackage.mapper}"
                             targetProject="${term.generator.targetPackage}">
            &lt;!&ndash; 是否在当前路径下新加一层schema, false 路径com.mimu.simple.springboot.mybatis.generator.mapper，
            true:com.mimu.simple.springboot.mybatis.generator.mapper.[schemaName]
            此处的 schemaName 为 下面 <table> 元素指定的 achemaName  &ndash;&gt;
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>

        &lt;!&ndash; 列出要生成 代码的数据表  &ndash;&gt;
        &lt;!&ndash; schema即为数据库名 tableName为对应的数据库表 domainObjectName是要生成的实体类 enable*ByExample
                   是否生成 example类   &ndash;&gt;
        &lt;!&ndash;<table tableName="term_info" domainObjectName="termInfo"
               enableCountByExample="false" enableDeleteByExample="false"
               enableSelectByExample="false"
               enableUpdateByExample="false">
            &lt;!&ndash;插入数据时，返回插入行数 还是 自增主键；常见值为 DB2,Mysql,SqlServer等 如果 identity 为 true
             则 mbg(mybatis generator) 在 生成 <insert> 插入语句时 会 添加 <selectKey> 元素 以指定返回的
             自增主键的值&ndash;&gt;
            <generatedKey column="id" sqlStatement="Mysql" identity="true"/>
            &lt;!&ndash;指定 某列的 数据类型  &ndash;&gt;
            <columnOverride column="id" jdbcType="" javaType="" typeHandler=""/>
        </table>&ndash;&gt;
        <table tableName="term_info" domainObjectName="TermInfo"
               enableCountByExample="false" enableDeleteByExample="false"
               enableSelectByExample="false"
               enableUpdateByExample="false">
            &lt;!&ndash; 用于指定生成实体类时是否使用实际的列名作为实体类的属性名。false是 Camel Case风格&ndash;&gt;
            <property name="useActualColumnNames" value="false"/>
            <generatedKey column="id" sqlStatement="Mysql" identity="true"/>
        </table>
        <table tableName="user_info" domainObjectName="UserInfo"
               enableCountByExample="false" enableDeleteByExample="false"
               enableSelectByExample="false"
               enableUpdateByExample="false">
            &lt;!&ndash; 用于指定生成实体类时是否使用实际的列名作为实体类的属性名。false是 Camel Case风格&ndash;&gt;
            <property name="useActualColumnNames" value="false"/>
            <generatedKey column="id" sqlStatement="Mysql" identity="true"/>
        </table>
    </context>-->
</generatorConfiguration>